{"ast":null,"code":"var _jsxFileName = \"/Users/arunmehra/Desktop/chatApp/frontend/src/components/SingleChat.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport { Box, IconButton, Input, Spinner, Text, FormControl } from \"@chakra-ui/react\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport ProfileModel from \"./misc/ProfileModel\";\nimport UpdateGroupChatModal from \"./misc/UpdateGroupChatModal\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/react\";\nimport './styles.css';\nimport ScrollableChat from \"./ScrollableChat\";\nimport io from \"socket.io-client\";\n// import Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ENDPOINT = \"http://localhost:1000\";\nvar socket, selectedChatCompare;\nconst defaultOptions = {\n  loop: true,\n  autoplay: true,\n  animationData: animationData,\n  rendererSettings: {\n    preserveAspectRatio: \"xMidYMid slice\"\n  }\n};\nconst SingleChat = ({\n  fetchAgain,\n  setFetchAgain\n}) => {\n  _s();\n  const {\n    user,\n    selectedChat,\n    setSelectedChat,\n    notifications,\n    setNotifications\n  } = ChatState();\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const toast = useToast();\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      };\n      setLoading(true);\n      const {\n        data\n      } = await axios.get(`/api/message/${selectedChat._id}`, config);\n      setMessages(data);\n      setLoading(false);\n      socket.emit('join chat', selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\"\n      });\n    }\n  };\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit('setup', user);\n    socket.on('connected', () => {\n      setSocketConnected(true);\n    });\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n  }, []);\n  const sendMessage = async event => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`\n          }\n        };\n        setNewMessage(\"\");\n        const {\n          data\n        } = await axios.post('/api/message', {\n          content: newMessage,\n          chatId: selectedChat\n        }, config);\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to Send Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\"\n        });\n      }\n    }\n  };\n  useEffect(() => {\n    fetchMessages();\n    selectedChatCompare = selectedChat;\n  }, [selectedChat]);\n  useEffect(() => {\n    socket.on(\"message recieved\", newMessageRecieved => {\n      if (!selectedChatCompare || selectedChatCompare._id !== newMessageRecieved.chat._id) {\n        //give notification\n        if (!notifications.includes(newMessageRecieved)) {\n          setNotifications([newMessageRecieved, ...notifications]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n  const typingHandler = e => {\n    setNewMessage(e.target.value);\n    if (!socketConnected) return;\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: selectedChat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        fontSize: {\n          base: \"28px\",\n          md: \"30px\"\n        },\n        pb: 3,\n        px: 2,\n        w: \"100%\",\n        fontFamily: \"Work sans\",\n        display: \"flex\",\n        justifyContent: {\n          base: \"space-between\"\n        },\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          display: {\n            base: \"flex\",\n            md: \"none\"\n          },\n          icon: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 35\n          }, this),\n          onClick: () => setSelectedChat(\"\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 25\n        }, this), messages && (!selectedChat.isGroupChat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [getSender(user, selectedChat.users), /*#__PURE__*/_jsxDEV(ProfileModel, {\n            user: getSenderFull(user, selectedChat.users)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [selectedChat.chatName.toUpperCase(), /*#__PURE__*/_jsxDEV(UpdateGroupChatModal, {\n            fetchMessages: fetchMessages,\n            fetchAgain: fetchAgain,\n            setFetchAgain: setFetchAgain\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        flexDir: \"column\",\n        justifyContent: \"flex-end\",\n        p: 3,\n        bg: \"#E8E8E8\",\n        w: \"100%\",\n        h: \"100%\",\n        borderRadius: \"lg\",\n        overflowY: \"hidden\",\n        children: [loading ? /*#__PURE__*/_jsxDEV(Spinner, {\n          size: \"xl\",\n          w: 20,\n          h: 20,\n          alignSelf: \"center\",\n          margin: \"auto\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages\",\n          children: /*#__PURE__*/_jsxDEV(ScrollableChat, {\n            messages: messages\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          onKeyDown: sendMessage,\n          isRequired: true,\n          mt: 3,\n          children: [isTyping ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\" \", /*#__PURE__*/_jsxDEV(Lottie, {\n              options: defaultOptions,\n              width: 70,\n              style: {\n                marginBottom: 15,\n                marginLeft: 0\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 47\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 41\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(Input, {\n            variant: \"filled\",\n            placeholder: \"Type a message..\",\n            bg: \"#E0E0E0\",\n            onChange: typingHandler,\n            value: newMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      h: \"100%\",\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"3xl\",\n        pb: 3,\n        fontFamily: \"Work sans\",\n        color: \"gray.500\",\n        children: \"Select a chat to start messaging\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n};\n_s(SingleChat, \"IsR2iFEG9iaeDhMYG+ujlwKRpMo=\", false, function () {\n  return [useToast];\n});\n_c = SingleChat;\nexport default SingleChat;\nvar _c;\n$RefreshReg$(_c, \"SingleChat\");","map":{"version":3,"names":["React","useEffect","useState","ChatState","Box","IconButton","Input","Spinner","Text","FormControl","ArrowBackIcon","getSender","getSenderFull","ProfileModel","UpdateGroupChatModal","axios","useToast","ScrollableChat","io","animationData","jsxDEV","_jsxDEV","Fragment","_Fragment","ENDPOINT","socket","selectedChatCompare","defaultOptions","loop","autoplay","rendererSettings","preserveAspectRatio","SingleChat","fetchAgain","setFetchAgain","_s","user","selectedChat","setSelectedChat","notifications","setNotifications","messages","setMessages","loading","setLoading","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","isTyping","setIsTyping","toast","fetchMessages","config","headers","Authorization","token","data","get","_id","emit","error","title","description","status","duration","isClosable","position","on","sendMessage","event","key","post","content","chatId","newMessageRecieved","chat","includes","typingHandler","e","target","value","lastTypingTime","Date","getTime","timerLength","setTimeout","timeNow","timeDiff","children","fontSize","base","md","pb","px","w","fontFamily","display","justifyContent","alignItems","icon","fileName","_jsxFileName","lineNumber","columnNumber","onClick","isGroupChat","users","chatName","toUpperCase","flexDir","p","bg","h","borderRadius","overflowY","size","alignSelf","margin","className","onKeyDown","isRequired","mt","Lottie","options","width","style","marginBottom","marginLeft","variant","placeholder","onChange","color","_c","$RefreshReg$"],"sources":["/Users/arunmehra/Desktop/chatApp/frontend/src/components/SingleChat.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport { Box, IconButton, Input, Spinner, Text,FormControl } from \"@chakra-ui/react\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport ProfileModel from \"./misc/ProfileModel\";\nimport UpdateGroupChatModal from \"./misc/UpdateGroupChatModal\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/react\";\nimport './styles.css'\nimport ScrollableChat from \"./ScrollableChat\";\nimport io from \"socket.io-client\";\n// import Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\"\n\nconst ENDPOINT = \"http://localhost:1000\";\nvar socket, selectedChatCompare;\n\nconst defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n        preserveAspectRatio: \"xMidYMid slice\",\n    },\n};\n\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\n    const { user, selectedChat, setSelectedChat,notifications,setNotifications } = ChatState();\n    const [messages,setMessages] = useState([]);\n    const [loading,setLoading] = useState(false);\n    const [newMessage,setNewMessage] = useState(\"\");\n    const [socketConnected,setSocketConnected] = useState(false);\n    const [typing,setTyping] = useState(false);\n    const [isTyping,setIsTyping] = useState(false);\n\n    const toast = useToast();\n\n    const fetchMessages = async () => {\n        if(!selectedChat)   return;\n        try {\n            const config = {\n                headers: {\n                    Authorization: `Bearer ${user.token}`,\n                },\n            };\n            setLoading(true);\n            const {data} = await axios.get(`/api/message/${selectedChat._id}`,config);\n            setMessages(data);\n            setLoading(false);\n            socket.emit('join chat',selectedChat._id);\n        }\n        catch (error) {\n            toast({\n                title: \"Error Occured!\",\n                description: \"Failed to Load the Messages\",\n                status: \"error\",\n                duration: 5000,\n                isClosable: true,\n                position: \"bottom\",\n            })\n        }\n    };\n    \n    useEffect(() => {\n        socket = io(ENDPOINT);\n        socket.emit('setup',user);\n        socket.on('connected', () => {\n            setSocketConnected(true);\n        })\n        socket.on(\"typing\",() => setIsTyping(true));\n        socket.on(\"stop typing\",() => setIsTyping(false));\n    }, []);\n    \n    const sendMessage =  async(event) => {\n        if(event.key === \"Enter\" && newMessage){\n            socket.emit(\"stop typing\",selectedChat._id);\n            try {\n                const config = {\n                    headers: {\n                        \"Content-Type\":\"application/json\",\n                        Authorization: `Bearer ${user.token}`,\n                    },\n                };\n                setNewMessage(\"\");\n                const {data} = await axios.post('/api/message',{content:newMessage,chatId:selectedChat},config);\n\n                socket.emit(\"new message\",data);\n                setMessages([...messages,data]);\n            } catch (error) {\n                toast({\n                    title: \"Error Occured!\",\n                    description: \"Failed to Send Message\",\n                    status: \"error\",\n                    duration: 5000,\n                    isClosable: true,\n                    position: \"bottom\",\n                })\n            }\n        }\n    }\n\n    useEffect(() => {\n        fetchMessages();\n        selectedChatCompare = selectedChat;\n    }, [selectedChat]);\n\n    useEffect(()=>{\n        socket.on(\"message recieved\",(newMessageRecieved)=>{\n            if(!selectedChatCompare || selectedChatCompare._id!==newMessageRecieved.chat._id){\n                //give notification\n                if(!notifications.includes(newMessageRecieved)){\n                    setNotifications([newMessageRecieved,...notifications]);\n                    setFetchAgain(!fetchAgain);\n                }\n            }\n            else{\n                setMessages([...messages,newMessageRecieved]);\n            }\n        })\n    })\n\n    const typingHandler = (e) => {\n        setNewMessage(e.target.value);\n\n        if(!socketConnected) return;\n        if(!typing){\n            setTyping(true);\n            socket.emit(\"typing\",selectedChat._id);\n        }\n\n        let lastTypingTime = new Date().getTime();\n        var timerLength = 3000;\n        setTimeout(()=>{\n            var timeNow = new Date().getTime();\n            var timeDiff = timeNow - lastTypingTime;\n            if(timeDiff>=timerLength && typing){\n                socket.emit(\"stop typing\",selectedChat._id);\n                setTyping(false);\n            }\n        }, timerLength);\n    }\n\n    return (\n        <>\n            {selectedChat ? (\n                <>\n                    <Text\n                        fontSize={{ base: \"28px\", md: \"30px\" }}\n                        pb={3}\n                        px={2}\n                        w=\"100%\"\n                        fontFamily=\"Work sans\"\n                        display=\"flex\"\n                        justifyContent={{ base: \"space-between\" }}\n                        alignItems=\"center\"\n                    >\n                        <IconButton\n                            display={{ base: \"flex\", md: \"none\" }}\n                            icon={<ArrowBackIcon />}\n                            onClick={() => setSelectedChat(\"\")}\n                        />\n                        {messages && (!selectedChat.isGroupChat ? (\n                            <>\n                                {getSender(user, selectedChat.users)}\n                                <ProfileModel user={getSenderFull(user, selectedChat.users)} />\n                            </>\n                        ) : (\n                            <>\n                                {selectedChat.chatName.toUpperCase()}\n\n                                <UpdateGroupChatModal\n                                    fetchMessages={fetchMessages}\n                                    fetchAgain={fetchAgain}\n                                    setFetchAgain={setFetchAgain}\n                                />\n\n                            </>\n                ))}\n                    </Text>\n                    <Box display=\"flex\"\n                        flexDir=\"column\"\n                        justifyContent=\"flex-end\"\n                        p={3}\n                        bg=\"#E8E8E8\"\n                        w=\"100%\"\n                        h=\"100%\"\n                        borderRadius=\"lg\"\n                        overflowY=\"hidden\">\n                        { loading? (\n                            <Spinner\n                                size=\"xl\"\n                                w={20}\n                                h={20}\n                                alignSelf=\"center\"\n                                margin=\"auto\"\n                            />\n                        ):(\n                    \n                            <div className=\"messages\">\n                                <ScrollableChat messages={messages}/>\n                            </div>\n\n                        )}\n                        <FormControl onKeyDown={sendMessage} isRequired mt={3}>\n                            \n                            {isTyping ? <div> <Lottie options={defaultOptions} width={70} style={{marginBottom:15 , marginLeft:0}}/> </div>: <></>}\n                            <Input variant=\"filled\" placeholder=\"Type a message..\" bg=\"#E0E0E0\" onChange={typingHandler} value={newMessage}/>\n                        </FormControl>\n                    </Box>\n                </>\n            ) : (\n                <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\n                    <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\" color=\"gray.500\">\n                        Select a chat to start messaging\n                    </Text>\n                </Box>\n\n            )}\n        </>\n    );\n}\n\nexport default SingleChat;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}